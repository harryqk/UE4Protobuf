// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Harry1.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Harry1_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Harry1_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Harry1_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Harry1_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Harry1_2eproto;
namespace tutorial {
class Harry1;
struct Harry1DefaultTypeInternal;
extern Harry1DefaultTypeInternal _Harry1_default_instance_;
class Harry1_EmbeddedMessage;
struct Harry1_EmbeddedMessageDefaultTypeInternal;
extern Harry1_EmbeddedMessageDefaultTypeInternal _Harry1_EmbeddedMessage_default_instance_;
}  // namespace tutorial
PROTOBUF_NAMESPACE_OPEN
template<> ::tutorial::Harry1* Arena::CreateMaybeMessage<::tutorial::Harry1>(Arena*);
template<> ::tutorial::Harry1_EmbeddedMessage* Arena::CreateMaybeMessage<::tutorial::Harry1_EmbeddedMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tutorial {

// ===================================================================

class Harry1_EmbeddedMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.Harry1.EmbeddedMessage) */ {
 public:
  inline Harry1_EmbeddedMessage() : Harry1_EmbeddedMessage(nullptr) {}
  ~Harry1_EmbeddedMessage() override;
  explicit PROTOBUF_CONSTEXPR Harry1_EmbeddedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Harry1_EmbeddedMessage(const Harry1_EmbeddedMessage& from);
  Harry1_EmbeddedMessage(Harry1_EmbeddedMessage&& from) noexcept
    : Harry1_EmbeddedMessage() {
    *this = ::std::move(from);
  }

  inline Harry1_EmbeddedMessage& operator=(const Harry1_EmbeddedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Harry1_EmbeddedMessage& operator=(Harry1_EmbeddedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Harry1_EmbeddedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const Harry1_EmbeddedMessage* internal_default_instance() {
    return reinterpret_cast<const Harry1_EmbeddedMessage*>(
               &_Harry1_EmbeddedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Harry1_EmbeddedMessage& a, Harry1_EmbeddedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Harry1_EmbeddedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Harry1_EmbeddedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Harry1_EmbeddedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Harry1_EmbeddedMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Harry1_EmbeddedMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Harry1_EmbeddedMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Harry1_EmbeddedMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.Harry1.EmbeddedMessage";
  }
  protected:
  explicit Harry1_EmbeddedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringValFieldNumber = 2,
    kInt32ValFieldNumber = 1,
  };
  // optional string stringVal = 2;
  bool has_stringval() const;
  private:
  bool _internal_has_stringval() const;
  public:
  void clear_stringval();
  const std::string& stringval() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stringval(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stringval();
  PROTOBUF_NODISCARD std::string* release_stringval();
  void set_allocated_stringval(std::string* stringval);
  private:
  const std::string& _internal_stringval() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stringval(const std::string& value);
  std::string* _internal_mutable_stringval();
  public:

  // optional int32 int32Val = 1;
  bool has_int32val() const;
  private:
  bool _internal_has_int32val() const;
  public:
  void clear_int32val();
  int32_t int32val() const;
  void set_int32val(int32_t value);
  private:
  int32_t _internal_int32val() const;
  void _internal_set_int32val(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.Harry1.EmbeddedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stringval_;
  int32_t int32val_;
  friend struct ::TableStruct_Harry1_2eproto;
};
// -------------------------------------------------------------------

class Harry1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.Harry1) */ {
 public:
  inline Harry1() : Harry1(nullptr) {}
  ~Harry1() override;
  explicit PROTOBUF_CONSTEXPR Harry1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Harry1(const Harry1& from);
  Harry1(Harry1&& from) noexcept
    : Harry1() {
    *this = ::std::move(from);
  }

  inline Harry1& operator=(const Harry1& from) {
    CopyFrom(from);
    return *this;
  }
  inline Harry1& operator=(Harry1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Harry1& default_instance() {
    return *internal_default_instance();
  }
  static inline const Harry1* internal_default_instance() {
    return reinterpret_cast<const Harry1*>(
               &_Harry1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Harry1& a, Harry1& b) {
    a.Swap(&b);
  }
  inline void Swap(Harry1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Harry1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Harry1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Harry1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Harry1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Harry1& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Harry1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.Harry1";
  }
  protected:
  explicit Harry1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Harry1_EmbeddedMessage EmbeddedMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedInt32ValFieldNumber = 4,
    kRepeatedStringValFieldNumber = 5,
    kStringValFieldNumber = 1,
    kBytesValFieldNumber = 2,
    kEmbeddedExample1FieldNumber = 3,
  };
  // repeated int32 repeatedInt32Val = 4;
  int repeatedint32val_size() const;
  private:
  int _internal_repeatedint32val_size() const;
  public:
  void clear_repeatedint32val();
  private:
  int32_t _internal_repeatedint32val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_repeatedint32val() const;
  void _internal_add_repeatedint32val(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_repeatedint32val();
  public:
  int32_t repeatedint32val(int index) const;
  void set_repeatedint32val(int index, int32_t value);
  void add_repeatedint32val(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      repeatedint32val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_repeatedint32val();

  // repeated string repeatedStringVal = 5;
  int repeatedstringval_size() const;
  private:
  int _internal_repeatedstringval_size() const;
  public:
  void clear_repeatedstringval();
  const std::string& repeatedstringval(int index) const;
  std::string* mutable_repeatedstringval(int index);
  void set_repeatedstringval(int index, const std::string& value);
  void set_repeatedstringval(int index, std::string&& value);
  void set_repeatedstringval(int index, const char* value);
  void set_repeatedstringval(int index, const char* value, size_t size);
  std::string* add_repeatedstringval();
  void add_repeatedstringval(const std::string& value);
  void add_repeatedstringval(std::string&& value);
  void add_repeatedstringval(const char* value);
  void add_repeatedstringval(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& repeatedstringval() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_repeatedstringval();
  private:
  const std::string& _internal_repeatedstringval(int index) const;
  std::string* _internal_add_repeatedstringval();
  public:

  // optional string stringVal = 1;
  bool has_stringval() const;
  private:
  bool _internal_has_stringval() const;
  public:
  void clear_stringval();
  const std::string& stringval() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stringval(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stringval();
  PROTOBUF_NODISCARD std::string* release_stringval();
  void set_allocated_stringval(std::string* stringval);
  private:
  const std::string& _internal_stringval() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stringval(const std::string& value);
  std::string* _internal_mutable_stringval();
  public:

  // optional bytes bytesVal = 2;
  bool has_bytesval() const;
  private:
  bool _internal_has_bytesval() const;
  public:
  void clear_bytesval();
  const std::string& bytesval() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytesval(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytesval();
  PROTOBUF_NODISCARD std::string* release_bytesval();
  void set_allocated_bytesval(std::string* bytesval);
  private:
  const std::string& _internal_bytesval() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytesval(const std::string& value);
  std::string* _internal_mutable_bytesval();
  public:

  // optional .tutorial.Harry1.EmbeddedMessage embeddedExample1 = 3;
  bool has_embeddedexample1() const;
  private:
  bool _internal_has_embeddedexample1() const;
  public:
  void clear_embeddedexample1();
  const ::tutorial::Harry1_EmbeddedMessage& embeddedexample1() const;
  PROTOBUF_NODISCARD ::tutorial::Harry1_EmbeddedMessage* release_embeddedexample1();
  ::tutorial::Harry1_EmbeddedMessage* mutable_embeddedexample1();
  void set_allocated_embeddedexample1(::tutorial::Harry1_EmbeddedMessage* embeddedexample1);
  private:
  const ::tutorial::Harry1_EmbeddedMessage& _internal_embeddedexample1() const;
  ::tutorial::Harry1_EmbeddedMessage* _internal_mutable_embeddedexample1();
  public:
  void unsafe_arena_set_allocated_embeddedexample1(
      ::tutorial::Harry1_EmbeddedMessage* embeddedexample1);
  ::tutorial::Harry1_EmbeddedMessage* unsafe_arena_release_embeddedexample1();

  // @@protoc_insertion_point(class_scope:tutorial.Harry1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > repeatedint32val_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> repeatedstringval_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stringval_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytesval_;
  ::tutorial::Harry1_EmbeddedMessage* embeddedexample1_;
  friend struct ::TableStruct_Harry1_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Harry1_EmbeddedMessage

// optional int32 int32Val = 1;
inline bool Harry1_EmbeddedMessage::_internal_has_int32val() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Harry1_EmbeddedMessage::has_int32val() const {
  return _internal_has_int32val();
}
inline void Harry1_EmbeddedMessage::clear_int32val() {
  int32val_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t Harry1_EmbeddedMessage::_internal_int32val() const {
  return int32val_;
}
inline int32_t Harry1_EmbeddedMessage::int32val() const {
  // @@protoc_insertion_point(field_get:tutorial.Harry1.EmbeddedMessage.int32Val)
  return _internal_int32val();
}
inline void Harry1_EmbeddedMessage::_internal_set_int32val(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  int32val_ = value;
}
inline void Harry1_EmbeddedMessage::set_int32val(int32_t value) {
  _internal_set_int32val(value);
  // @@protoc_insertion_point(field_set:tutorial.Harry1.EmbeddedMessage.int32Val)
}

// optional string stringVal = 2;
inline bool Harry1_EmbeddedMessage::_internal_has_stringval() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Harry1_EmbeddedMessage::has_stringval() const {
  return _internal_has_stringval();
}
inline void Harry1_EmbeddedMessage::clear_stringval() {
  stringval_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Harry1_EmbeddedMessage::stringval() const {
  // @@protoc_insertion_point(field_get:tutorial.Harry1.EmbeddedMessage.stringVal)
  return _internal_stringval();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Harry1_EmbeddedMessage::set_stringval(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 stringval_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tutorial.Harry1.EmbeddedMessage.stringVal)
}
inline std::string* Harry1_EmbeddedMessage::mutable_stringval() {
  std::string* _s = _internal_mutable_stringval();
  // @@protoc_insertion_point(field_mutable:tutorial.Harry1.EmbeddedMessage.stringVal)
  return _s;
}
inline const std::string& Harry1_EmbeddedMessage::_internal_stringval() const {
  return stringval_.Get();
}
inline void Harry1_EmbeddedMessage::_internal_set_stringval(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  stringval_.Set(value, GetArenaForAllocation());
}
inline std::string* Harry1_EmbeddedMessage::_internal_mutable_stringval() {
  _has_bits_[0] |= 0x00000001u;
  return stringval_.Mutable(GetArenaForAllocation());
}
inline std::string* Harry1_EmbeddedMessage::release_stringval() {
  // @@protoc_insertion_point(field_release:tutorial.Harry1.EmbeddedMessage.stringVal)
  if (!_internal_has_stringval()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = stringval_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stringval_.IsDefault()) {
    stringval_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Harry1_EmbeddedMessage::set_allocated_stringval(std::string* stringval) {
  if (stringval != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stringval_.SetAllocated(stringval, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stringval_.IsDefault()) {
    stringval_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tutorial.Harry1.EmbeddedMessage.stringVal)
}

// -------------------------------------------------------------------

// Harry1

// optional string stringVal = 1;
inline bool Harry1::_internal_has_stringval() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Harry1::has_stringval() const {
  return _internal_has_stringval();
}
inline void Harry1::clear_stringval() {
  stringval_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Harry1::stringval() const {
  // @@protoc_insertion_point(field_get:tutorial.Harry1.stringVal)
  return _internal_stringval();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Harry1::set_stringval(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 stringval_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tutorial.Harry1.stringVal)
}
inline std::string* Harry1::mutable_stringval() {
  std::string* _s = _internal_mutable_stringval();
  // @@protoc_insertion_point(field_mutable:tutorial.Harry1.stringVal)
  return _s;
}
inline const std::string& Harry1::_internal_stringval() const {
  return stringval_.Get();
}
inline void Harry1::_internal_set_stringval(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  stringval_.Set(value, GetArenaForAllocation());
}
inline std::string* Harry1::_internal_mutable_stringval() {
  _has_bits_[0] |= 0x00000001u;
  return stringval_.Mutable(GetArenaForAllocation());
}
inline std::string* Harry1::release_stringval() {
  // @@protoc_insertion_point(field_release:tutorial.Harry1.stringVal)
  if (!_internal_has_stringval()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = stringval_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stringval_.IsDefault()) {
    stringval_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Harry1::set_allocated_stringval(std::string* stringval) {
  if (stringval != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stringval_.SetAllocated(stringval, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stringval_.IsDefault()) {
    stringval_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tutorial.Harry1.stringVal)
}

// optional bytes bytesVal = 2;
inline bool Harry1::_internal_has_bytesval() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Harry1::has_bytesval() const {
  return _internal_has_bytesval();
}
inline void Harry1::clear_bytesval() {
  bytesval_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Harry1::bytesval() const {
  // @@protoc_insertion_point(field_get:tutorial.Harry1.bytesVal)
  return _internal_bytesval();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Harry1::set_bytesval(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 bytesval_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tutorial.Harry1.bytesVal)
}
inline std::string* Harry1::mutable_bytesval() {
  std::string* _s = _internal_mutable_bytesval();
  // @@protoc_insertion_point(field_mutable:tutorial.Harry1.bytesVal)
  return _s;
}
inline const std::string& Harry1::_internal_bytesval() const {
  return bytesval_.Get();
}
inline void Harry1::_internal_set_bytesval(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  bytesval_.Set(value, GetArenaForAllocation());
}
inline std::string* Harry1::_internal_mutable_bytesval() {
  _has_bits_[0] |= 0x00000002u;
  return bytesval_.Mutable(GetArenaForAllocation());
}
inline std::string* Harry1::release_bytesval() {
  // @@protoc_insertion_point(field_release:tutorial.Harry1.bytesVal)
  if (!_internal_has_bytesval()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = bytesval_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bytesval_.IsDefault()) {
    bytesval_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Harry1::set_allocated_bytesval(std::string* bytesval) {
  if (bytesval != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bytesval_.SetAllocated(bytesval, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bytesval_.IsDefault()) {
    bytesval_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tutorial.Harry1.bytesVal)
}

// optional .tutorial.Harry1.EmbeddedMessage embeddedExample1 = 3;
inline bool Harry1::_internal_has_embeddedexample1() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || embeddedexample1_ != nullptr);
  return value;
}
inline bool Harry1::has_embeddedexample1() const {
  return _internal_has_embeddedexample1();
}
inline void Harry1::clear_embeddedexample1() {
  if (embeddedexample1_ != nullptr) embeddedexample1_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::tutorial::Harry1_EmbeddedMessage& Harry1::_internal_embeddedexample1() const {
  const ::tutorial::Harry1_EmbeddedMessage* p = embeddedexample1_;
  return p != nullptr ? *p : reinterpret_cast<const ::tutorial::Harry1_EmbeddedMessage&>(
      ::tutorial::_Harry1_EmbeddedMessage_default_instance_);
}
inline const ::tutorial::Harry1_EmbeddedMessage& Harry1::embeddedexample1() const {
  // @@protoc_insertion_point(field_get:tutorial.Harry1.embeddedExample1)
  return _internal_embeddedexample1();
}
inline void Harry1::unsafe_arena_set_allocated_embeddedexample1(
    ::tutorial::Harry1_EmbeddedMessage* embeddedexample1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(embeddedexample1_);
  }
  embeddedexample1_ = embeddedexample1;
  if (embeddedexample1) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tutorial.Harry1.embeddedExample1)
}
inline ::tutorial::Harry1_EmbeddedMessage* Harry1::release_embeddedexample1() {
  _has_bits_[0] &= ~0x00000004u;
  ::tutorial::Harry1_EmbeddedMessage* temp = embeddedexample1_;
  embeddedexample1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tutorial::Harry1_EmbeddedMessage* Harry1::unsafe_arena_release_embeddedexample1() {
  // @@protoc_insertion_point(field_release:tutorial.Harry1.embeddedExample1)
  _has_bits_[0] &= ~0x00000004u;
  ::tutorial::Harry1_EmbeddedMessage* temp = embeddedexample1_;
  embeddedexample1_ = nullptr;
  return temp;
}
inline ::tutorial::Harry1_EmbeddedMessage* Harry1::_internal_mutable_embeddedexample1() {
  _has_bits_[0] |= 0x00000004u;
  if (embeddedexample1_ == nullptr) {
    auto* p = CreateMaybeMessage<::tutorial::Harry1_EmbeddedMessage>(GetArenaForAllocation());
    embeddedexample1_ = p;
  }
  return embeddedexample1_;
}
inline ::tutorial::Harry1_EmbeddedMessage* Harry1::mutable_embeddedexample1() {
  ::tutorial::Harry1_EmbeddedMessage* _msg = _internal_mutable_embeddedexample1();
  // @@protoc_insertion_point(field_mutable:tutorial.Harry1.embeddedExample1)
  return _msg;
}
inline void Harry1::set_allocated_embeddedexample1(::tutorial::Harry1_EmbeddedMessage* embeddedexample1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete embeddedexample1_;
  }
  if (embeddedexample1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(embeddedexample1);
    if (message_arena != submessage_arena) {
      embeddedexample1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, embeddedexample1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  embeddedexample1_ = embeddedexample1;
  // @@protoc_insertion_point(field_set_allocated:tutorial.Harry1.embeddedExample1)
}

// repeated int32 repeatedInt32Val = 4;
inline int Harry1::_internal_repeatedint32val_size() const {
  return repeatedint32val_.size();
}
inline int Harry1::repeatedint32val_size() const {
  return _internal_repeatedint32val_size();
}
inline void Harry1::clear_repeatedint32val() {
  repeatedint32val_.Clear();
}
inline int32_t Harry1::_internal_repeatedint32val(int index) const {
  return repeatedint32val_.Get(index);
}
inline int32_t Harry1::repeatedint32val(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.Harry1.repeatedInt32Val)
  return _internal_repeatedint32val(index);
}
inline void Harry1::set_repeatedint32val(int index, int32_t value) {
  repeatedint32val_.Set(index, value);
  // @@protoc_insertion_point(field_set:tutorial.Harry1.repeatedInt32Val)
}
inline void Harry1::_internal_add_repeatedint32val(int32_t value) {
  repeatedint32val_.Add(value);
}
inline void Harry1::add_repeatedint32val(int32_t value) {
  _internal_add_repeatedint32val(value);
  // @@protoc_insertion_point(field_add:tutorial.Harry1.repeatedInt32Val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Harry1::_internal_repeatedint32val() const {
  return repeatedint32val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Harry1::repeatedint32val() const {
  // @@protoc_insertion_point(field_list:tutorial.Harry1.repeatedInt32Val)
  return _internal_repeatedint32val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Harry1::_internal_mutable_repeatedint32val() {
  return &repeatedint32val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Harry1::mutable_repeatedint32val() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.Harry1.repeatedInt32Val)
  return _internal_mutable_repeatedint32val();
}

// repeated string repeatedStringVal = 5;
inline int Harry1::_internal_repeatedstringval_size() const {
  return repeatedstringval_.size();
}
inline int Harry1::repeatedstringval_size() const {
  return _internal_repeatedstringval_size();
}
inline void Harry1::clear_repeatedstringval() {
  repeatedstringval_.Clear();
}
inline std::string* Harry1::add_repeatedstringval() {
  std::string* _s = _internal_add_repeatedstringval();
  // @@protoc_insertion_point(field_add_mutable:tutorial.Harry1.repeatedStringVal)
  return _s;
}
inline const std::string& Harry1::_internal_repeatedstringval(int index) const {
  return repeatedstringval_.Get(index);
}
inline const std::string& Harry1::repeatedstringval(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.Harry1.repeatedStringVal)
  return _internal_repeatedstringval(index);
}
inline std::string* Harry1::mutable_repeatedstringval(int index) {
  // @@protoc_insertion_point(field_mutable:tutorial.Harry1.repeatedStringVal)
  return repeatedstringval_.Mutable(index);
}
inline void Harry1::set_repeatedstringval(int index, const std::string& value) {
  repeatedstringval_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tutorial.Harry1.repeatedStringVal)
}
inline void Harry1::set_repeatedstringval(int index, std::string&& value) {
  repeatedstringval_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tutorial.Harry1.repeatedStringVal)
}
inline void Harry1::set_repeatedstringval(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeatedstringval_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tutorial.Harry1.repeatedStringVal)
}
inline void Harry1::set_repeatedstringval(int index, const char* value, size_t size) {
  repeatedstringval_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tutorial.Harry1.repeatedStringVal)
}
inline std::string* Harry1::_internal_add_repeatedstringval() {
  return repeatedstringval_.Add();
}
inline void Harry1::add_repeatedstringval(const std::string& value) {
  repeatedstringval_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tutorial.Harry1.repeatedStringVal)
}
inline void Harry1::add_repeatedstringval(std::string&& value) {
  repeatedstringval_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tutorial.Harry1.repeatedStringVal)
}
inline void Harry1::add_repeatedstringval(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  repeatedstringval_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tutorial.Harry1.repeatedStringVal)
}
inline void Harry1::add_repeatedstringval(const char* value, size_t size) {
  repeatedstringval_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tutorial.Harry1.repeatedStringVal)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Harry1::repeatedstringval() const {
  // @@protoc_insertion_point(field_list:tutorial.Harry1.repeatedStringVal)
  return repeatedstringval_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Harry1::mutable_repeatedstringval() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.Harry1.repeatedStringVal)
  return &repeatedstringval_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Harry1_2eproto

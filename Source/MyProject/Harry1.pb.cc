// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Harry1.proto

#include "Harry1.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tutorial {
PROTOBUF_CONSTEXPR Harry1_EmbeddedMessage::Harry1_EmbeddedMessage(
    ::_pbi::ConstantInitialized)
  : stringval_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , int32val_(0){}
struct Harry1_EmbeddedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Harry1_EmbeddedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Harry1_EmbeddedMessageDefaultTypeInternal() {}
  union {
    Harry1_EmbeddedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Harry1_EmbeddedMessageDefaultTypeInternal _Harry1_EmbeddedMessage_default_instance_;
PROTOBUF_CONSTEXPR Harry1::Harry1(
    ::_pbi::ConstantInitialized)
  : repeatedint32val_()
  , repeatedstringval_()
  , stringval_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , bytesval_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , embeddedexample1_(nullptr){}
struct Harry1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Harry1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Harry1DefaultTypeInternal() {}
  union {
    Harry1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Harry1DefaultTypeInternal _Harry1_default_instance_;
}  // namespace tutorial
static ::_pb::Metadata file_level_metadata_Harry1_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Harry1_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Harry1_2eproto = nullptr;

const uint32_t TableStruct_Harry1_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tutorial::Harry1_EmbeddedMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::Harry1_EmbeddedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::Harry1_EmbeddedMessage, int32val_),
  PROTOBUF_FIELD_OFFSET(::tutorial::Harry1_EmbeddedMessage, stringval_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::tutorial::Harry1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::Harry1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::Harry1, stringval_),
  PROTOBUF_FIELD_OFFSET(::tutorial::Harry1, bytesval_),
  PROTOBUF_FIELD_OFFSET(::tutorial::Harry1, embeddedexample1_),
  PROTOBUF_FIELD_OFFSET(::tutorial::Harry1, repeatedint32val_),
  PROTOBUF_FIELD_OFFSET(::tutorial::Harry1, repeatedstringval_),
  0,
  1,
  2,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::tutorial::Harry1_EmbeddedMessage)},
  { 10, 21, -1, sizeof(::tutorial::Harry1)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tutorial::_Harry1_EmbeddedMessage_default_instance_._instance,
  &::tutorial::_Harry1_default_instance_._instance,
};

const char descriptor_table_protodef_Harry1_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Harry1.proto\022\010tutorial\"\326\001\n\006Harry1\022\021\n\ts"
  "tringVal\030\001 \001(\t\022\020\n\010bytesVal\030\002 \001(\014\022:\n\020embe"
  "ddedExample1\030\003 \001(\0132 .tutorial.Harry1.Emb"
  "eddedMessage\022\030\n\020repeatedInt32Val\030\004 \003(\005\022\031"
  "\n\021repeatedStringVal\030\005 \003(\t\0326\n\017EmbeddedMes"
  "sage\022\020\n\010int32Val\030\001 \001(\005\022\021\n\tstringVal\030\002 \001("
  "\t"
  ;
static ::_pbi::once_flag descriptor_table_Harry1_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Harry1_2eproto = {
    false, false, 241, descriptor_table_protodef_Harry1_2eproto,
    "Harry1.proto",
    &descriptor_table_Harry1_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_Harry1_2eproto::offsets,
    file_level_metadata_Harry1_2eproto, file_level_enum_descriptors_Harry1_2eproto,
    file_level_service_descriptors_Harry1_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Harry1_2eproto_getter() {
  return &descriptor_table_Harry1_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Harry1_2eproto(&descriptor_table_Harry1_2eproto);
namespace tutorial {

// ===================================================================

class Harry1_EmbeddedMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Harry1_EmbeddedMessage>()._has_bits_);
  static void set_has_int32val(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stringval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Harry1_EmbeddedMessage::Harry1_EmbeddedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:tutorial.Harry1.EmbeddedMessage)
}
Harry1_EmbeddedMessage::Harry1_EmbeddedMessage(const Harry1_EmbeddedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stringval_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stringval_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stringval()) {
    stringval_.Set(from._internal_stringval(), 
      GetArenaForAllocation());
  }
  int32val_ = from.int32val_;
  // @@protoc_insertion_point(copy_constructor:tutorial.Harry1.EmbeddedMessage)
}

inline void Harry1_EmbeddedMessage::SharedCtor() {
stringval_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stringval_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
int32val_ = 0;
}

Harry1_EmbeddedMessage::~Harry1_EmbeddedMessage() {
  // @@protoc_insertion_point(destructor:tutorial.Harry1.EmbeddedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Harry1_EmbeddedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stringval_.Destroy();
}

void Harry1_EmbeddedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Harry1_EmbeddedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.Harry1.EmbeddedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    stringval_.ClearNonDefaultToEmpty();
  }
  int32val_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Harry1_EmbeddedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 int32Val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_int32val(&has_bits);
          int32val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string stringVal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stringval();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tutorial.Harry1.EmbeddedMessage.stringVal");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Harry1_EmbeddedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.Harry1.EmbeddedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 int32Val = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_int32val(), target);
  }

  // optional string stringVal = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stringval().data(), static_cast<int>(this->_internal_stringval().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tutorial.Harry1.EmbeddedMessage.stringVal");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stringval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.Harry1.EmbeddedMessage)
  return target;
}

size_t Harry1_EmbeddedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.Harry1.EmbeddedMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string stringVal = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stringval());
    }

    // optional int32 int32Val = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_int32val());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Harry1_EmbeddedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Harry1_EmbeddedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Harry1_EmbeddedMessage::GetClassData() const { return &_class_data_; }

void Harry1_EmbeddedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Harry1_EmbeddedMessage *>(to)->MergeFrom(
      static_cast<const Harry1_EmbeddedMessage &>(from));
}


void Harry1_EmbeddedMessage::MergeFrom(const Harry1_EmbeddedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.Harry1.EmbeddedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_stringval(from._internal_stringval());
    }
    if (cached_has_bits & 0x00000002u) {
      int32val_ = from.int32val_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Harry1_EmbeddedMessage::CopyFrom(const Harry1_EmbeddedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.Harry1.EmbeddedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Harry1_EmbeddedMessage::IsInitialized() const {
  return true;
}

void Harry1_EmbeddedMessage::InternalSwap(Harry1_EmbeddedMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &stringval_, lhs_arena,
      &other->stringval_, rhs_arena
  );
  swap(int32val_, other->int32val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Harry1_EmbeddedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Harry1_2eproto_getter, &descriptor_table_Harry1_2eproto_once,
      file_level_metadata_Harry1_2eproto[0]);
}

// ===================================================================

class Harry1::_Internal {
 public:
  using HasBits = decltype(std::declval<Harry1>()._has_bits_);
  static void set_has_stringval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bytesval(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tutorial::Harry1_EmbeddedMessage& embeddedexample1(const Harry1* msg);
  static void set_has_embeddedexample1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::tutorial::Harry1_EmbeddedMessage&
Harry1::_Internal::embeddedexample1(const Harry1* msg) {
  return *msg->embeddedexample1_;
}
Harry1::Harry1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  repeatedint32val_(arena),
  repeatedstringval_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:tutorial.Harry1)
}
Harry1::Harry1(const Harry1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      repeatedint32val_(from.repeatedint32val_),
      repeatedstringval_(from.repeatedstringval_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stringval_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stringval_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stringval()) {
    stringval_.Set(from._internal_stringval(), 
      GetArenaForAllocation());
  }
  bytesval_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bytesval_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bytesval()) {
    bytesval_.Set(from._internal_bytesval(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_embeddedexample1()) {
    embeddedexample1_ = new ::tutorial::Harry1_EmbeddedMessage(*from.embeddedexample1_);
  } else {
    embeddedexample1_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tutorial.Harry1)
}

inline void Harry1::SharedCtor() {
stringval_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stringval_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bytesval_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bytesval_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
embeddedexample1_ = nullptr;
}

Harry1::~Harry1() {
  // @@protoc_insertion_point(destructor:tutorial.Harry1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Harry1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stringval_.Destroy();
  bytesval_.Destroy();
  if (this != internal_default_instance()) delete embeddedexample1_;
}

void Harry1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Harry1::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.Harry1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeatedint32val_.Clear();
  repeatedstringval_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      stringval_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      bytesval_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(embeddedexample1_ != nullptr);
      embeddedexample1_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Harry1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string stringVal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stringval();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tutorial.Harry1.stringVal");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes bytesVal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bytesval();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .tutorial.Harry1.EmbeddedMessage embeddedExample1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_embeddedexample1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 repeatedInt32Val = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_repeatedint32val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_repeatedint32val(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string repeatedStringVal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_repeatedstringval();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "tutorial.Harry1.repeatedStringVal");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Harry1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.Harry1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string stringVal = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stringval().data(), static_cast<int>(this->_internal_stringval().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tutorial.Harry1.stringVal");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stringval(), target);
  }

  // optional bytes bytesVal = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_bytesval(), target);
  }

  // optional .tutorial.Harry1.EmbeddedMessage embeddedExample1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::embeddedexample1(this),
        _Internal::embeddedexample1(this).GetCachedSize(), target, stream);
  }

  // repeated int32 repeatedInt32Val = 4;
  for (int i = 0, n = this->_internal_repeatedint32val_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_repeatedint32val(i), target);
  }

  // repeated string repeatedStringVal = 5;
  for (int i = 0, n = this->_internal_repeatedstringval_size(); i < n; i++) {
    const auto& s = this->_internal_repeatedstringval(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tutorial.Harry1.repeatedStringVal");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.Harry1)
  return target;
}

size_t Harry1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.Harry1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 repeatedInt32Val = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->repeatedint32val_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_repeatedint32val_size());
    total_size += data_size;
  }

  // repeated string repeatedStringVal = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeatedstringval_.size());
  for (int i = 0, n = repeatedstringval_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeatedstringval_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string stringVal = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stringval());
    }

    // optional bytes bytesVal = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytesval());
    }

    // optional .tutorial.Harry1.EmbeddedMessage embeddedExample1 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *embeddedexample1_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Harry1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Harry1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Harry1::GetClassData() const { return &_class_data_; }

void Harry1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Harry1 *>(to)->MergeFrom(
      static_cast<const Harry1 &>(from));
}


void Harry1::MergeFrom(const Harry1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tutorial.Harry1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  repeatedint32val_.MergeFrom(from.repeatedint32val_);
  repeatedstringval_.MergeFrom(from.repeatedstringval_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_stringval(from._internal_stringval());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_bytesval(from._internal_bytesval());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_embeddedexample1()->::tutorial::Harry1_EmbeddedMessage::MergeFrom(from._internal_embeddedexample1());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Harry1::CopyFrom(const Harry1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.Harry1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Harry1::IsInitialized() const {
  return true;
}

void Harry1::InternalSwap(Harry1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  repeatedint32val_.InternalSwap(&other->repeatedint32val_);
  repeatedstringval_.InternalSwap(&other->repeatedstringval_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &stringval_, lhs_arena,
      &other->stringval_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bytesval_, lhs_arena,
      &other->bytesval_, rhs_arena
  );
  swap(embeddedexample1_, other->embeddedexample1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Harry1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Harry1_2eproto_getter, &descriptor_table_Harry1_2eproto_once,
      file_level_metadata_Harry1_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tutorial
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tutorial::Harry1_EmbeddedMessage*
Arena::CreateMaybeMessage< ::tutorial::Harry1_EmbeddedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::Harry1_EmbeddedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::Harry1*
Arena::CreateMaybeMessage< ::tutorial::Harry1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::Harry1 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
